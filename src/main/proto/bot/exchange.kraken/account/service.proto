syntax = "proto3";

package bot.exchange.kraken.account;

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "akkaserverless/annotations.proto";

option java_outer_classname = "KrakenAccountAPI";


// COMMANDS
message AssociateAccountCommand {
    string kraken_account_id = 1 [(akkaserverless.field).entity_key = true];
    string bot_account_id = 2;
}

message GetAccountCommand {
    string kraken_account_id = 1 [(akkaserverless.field).entity_key = true];
}

message DissociateAccountCommand {
    string kraken_account_id = 1 [(akkaserverless.field).entity_key = true];
}

message AssignAPIKeysCommand {
    string kraken_account_id = 1 [(akkaserverless.field).entity_key = true];
    string api_key = 2;
    string api_secret = 3;
}

message TestAPIKeysCommand {
    string kraken_account_id = 1 [(akkaserverless.field).entity_key = true];
    string api_key = 2;
}

message TestAPIKeysResponse {
    bool success = 1;
    string error_message = 2;
}

message UpdateBalanceCommand {
    string kraken_account_id = 1 [(akkaserverless.field).entity_key = true];
}

message UpdateBalanceResponse {
    repeated UpdateBalanceResponseForAsset assets = 1;
    string costBasis = 2;
    string equity = 3;
    string equivalentBalance = 4;
    string marginAmount = 5;
    string freeMargin = 6;
    string marginLevel = 7;
    string unrealizedNetProfitLoss = 8;
    string tradeBalance = 9;
    string floatingValuation = 10;
}

message UpdateBalanceResponseForAsset {
    string Asset = 1;
    string amount = 2;
}

// VALUE TYPES
message GetAccountResponse {
    string id = 1;
    string email = 2;
}

// SERVICE

/**
* The service definition.
* Note: GRPC is the default mechanism, but the google.api.http option gives us http capability for free.
**/
service KrakenAccountService {

    rpc AssociateAccount(AssociateAccountCommand) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/exchange/kraken/account/associate"
            body: "*"
        };
    }

    rpc GetAccount(GetAccountCommand) returns (GetAccountResponse) {
        option (google.api.http) = {
            get: "/exchange/kraken/account/get"
        };
    }

    rpc DissociateAccount(DissociateAccountCommand) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/exchange/kraken/account/dissociate"
            body: "*"
        };
    }

    rpc AssignAPIKeys(AssignAPIKeysCommand) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/exchange/kraken/account/assign-keys"
            body: "*"
        };
    }

    rpc TestAPIKeys(TestAPIKeysCommand) returns (TestAPIKeysResponse) {
        option (google.api.http) = {
            post: "/exchange/kraken/account/test-api-keys"
            body: "*"
        };
    }

    rpc UpdateBalance(UpdateBalanceCommand) returns (UpdateBalanceResponse) {
        option (google.api.http) = {
            post: "/exchange/kraken/balance/update"
            body: "*"
        };
    }
}