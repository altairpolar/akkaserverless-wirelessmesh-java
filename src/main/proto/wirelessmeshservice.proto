syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "akkaserverless/annotations.proto";

import "common/wirelessmeshcommon.proto";

/**
* This is where we define our service and how the outside world will interact with our user function.
**/
package wirelessmeshservice;

option java_multiple_files = true;
option java_package = "wirelessmesh.service";

/**
* The following section contains the message definitions needed for the service below.
**/

message AddCustomerLocationCommand {
    string customerLocationId = 1 [(akkaserverless.field).entity_key = true];
    string accessToken = 2;
    string email = 3;
}

message RemoveCustomerLocationCommand {
    string customerLocationId = 1 [(akkaserverless.field).entity_key = true];
}

message ActivateDeviceCommand {
    string customerLocationId = 1 [(akkaserverless.field).entity_key = true];
    string deviceId = 2;
}

message AssignRoomCommand {
    string customerLocationId = 1 [(akkaserverless.field).entity_key = true];
    string deviceId = 2;
    string room = 3;
}

message RemoveDeviceCommand {
    string customerLocationId = 1 [(akkaserverless.field).entity_key = true];
    string deviceId = 2;
}

message ToggleNightlightCommand {
    string customerLocationId = 1 [(akkaserverless.field).entity_key = true];
    string deviceId = 2;
}

message GetCustomerLocationCommand {
    string customerLocationId = 1 [(akkaserverless.field).entity_key = true];
}

/**
* The service definition. Note: GRPC is the default mechanism, but the google.api.http option gives us http capability
* for free.
**/
service WirelessMeshService {
    rpc AddCustomerLocation(AddCustomerLocationCommand) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/wirelessmesh/add-customer-location",
            body: "*",
        };
    }

    rpc RemoveCustomerLocation(RemoveCustomerLocationCommand) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/wirelessmesh/remove-customer-location",
            body: "*",
        };
    }

    rpc ActivateDevice(ActivateDeviceCommand) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/wirelessmesh/activate-device",
            body: "*",
        };
    }

    rpc RemoveDevice(RemoveDeviceCommand) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/wirelessmesh/remove-device",
            body: "*",
        };
    }

    rpc AssignRoom(AssignRoomCommand) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/wirelessmesh/assign-room",
            body: "*",
        };
    }

    rpc GetCustomerLocation(GetCustomerLocationCommand) returns (wirelessmeshcommon.CustomerLocation) {
        option (google.api.http) = {
            get: "/wirelessmesh/get-customer-location",
        };
    }

    rpc ToggleNightlight(ToggleNightlightCommand) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/wirelessmesh/toggle-nightlight",
            body: "*",
        };
    }
}
